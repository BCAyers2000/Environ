#!/usr/bin/env sh

###################################################################################################

# check if object has been modified
already_modified() {
    string="$1"
    test "${string#*env_}" != "$string" && return 0
    return 1
}

# apply 'env_' prefix to object
modify() {
    ! already_modified "$1" && find . -name '*.f90' -print0 | xargs -0 sed -i "s/\<$1\>/env_$1/gi"
}

# remove extra whitespace including tabs
strip() {
    sed -e "s/\t/ /g" -e 's/  */ /g' -e 's/^ //'
}

# return unique list of object names
clean_results() {
    rev | strip | cut -d ' ' -f 1 | rev | uniq
}

# get files to modify
get_files() {
    find . -name '*.f90' -print0
}

# get objects to modify
get_objects() {
    get_files | xargs -0 grep -hiE "$1"
}

# remove current library files
clean_library() {
    rm ./*.f90 2>/dev/null
}

# remove references of discarded modules
discard_modules() {
    sed -i '/SUBROUTINE invfft_b/,/END SUBROUTINE invfft_b/d' ./*.f90 2>/dev/null
    sed -i '/elif defined(__FFTW)/,/USE fft_scalar_fftw/d' ./*.f90 2>/dev/null
    sed -i '/fft_smallbox/d' ./*.f90 2>/dev/null
}

# prefix env_ to modules, routines, and interfaces
apply_prefix() {
    modules="$(get_objects '^\s*module' | awk 'BEGIN {IGNORECASE = 1} {if ($2!="procedure") print $0}' | clean_results)"
    derived_types="$(get_objects '^\s*type(\s*,\s*\w+)*\s*(:{2})?\s*[^(]\w+' | clean_results)"
    subroutines="$(get_objects '^\s*subroutine' | cut -d '(' -f 1 | clean_results)"
    functions="$(get_objects '^\s*(pure|recursive|integer|logical|(complex|real)\s*\(\w+\)\s*)\s*function' | rev | cut -d '(' -f 2 | rev | clean_results)"
    interfaces="$(get_objects '^\s*(abstract)?\s*interface\s+\w+' | clean_results)"

    for object in \
        $modules \
        $derived_types \
        $subroutines \
        $functions \
        $interfaces; do
        modify "$object"
    done
}

# point hpsort to Environ/utils/sorting.f90
# QE stores hpsort in FFTXlib
# Environ stores hpsort in utils/sorting.f90
reroute_hpsort() {
    sed -i '/SUBROUTINE env_hpsort/,/END SUBROUTINE env_hpsort/d' ./*.f90 2>/dev/null
    sed -i "/USE env_fft_param/a USE env_sorting" stick_base.f90
}

# fix needed by PyE-C
broadcast_info() {
    sed -i \
        -e '/USE env_fft_param/a \        USE env_mp, ONLY: env_mp_bcast' \
        -e '/info < 0/i \\n  CALL env_mp_bcast(info, dfft%root, dfft%comm)\n' scatter_mod.f90
}

# copy files over from QE/FFTXlib
copy_files() {
    find "$1/FFTXlib" -name '*.f90' \
        ! -name '*test*' \
        ! -name '*smallbox*' \
        ! -name 'utils.f90' \
        ! -name 'sort.f90' \
        ! -name 'recips.f90' \
        ! -name 'fftw_interfaces.f90' \
        ! -name 'fft_scalar.FFTW.f90' \
        -exec cp -t . {} +
}

check_files() {
    if test "$(find . -name '*.f90' 2>/dev/null)"; then
        return 0
    else
        printf "\nNo files found\n\n" && return 1
    fi
}

help_message() {
    printf "\nupdate -h for help\n\n"
}

###################################################################################################

! test "$1" && help_message && exit

while getopts "hmrcv:p:" opt; do

    case "$opt" in
    h)
        echo
        echo "usage: update <flag> <option>"
        echo
        echo "To update library, run update -p <qeroot> -m -v ###"
        echo
        echo "-c             clean current library state (rm *.f90)"
        echo
        echo "-p <qe-path>   copy files from <qe-path>/FFTXlib to Environ/FFTXlib"
        echo
        echo "-m             apply 'env_' prefix modification"
        echo
        echo "-r             revert 'env_' prefix modification"
        echo
        echo "-v ###         update version in README.md to ###"
        echo
        ;;
    c)
        printf "\nClean library (*.f90) (y|n)? "
        read -r o
        test "$o" = y && clean_library && echo && exit
        ;;
    m)
        check_files || exit
        discard_modules
        apply_prefix
        reroute_hpsort
        broadcast_info
        ;;
    r)
        # revert env_ prefix and exit
        sed -i s/env_//g ./*.f90 2>/dev/null && exit
        ;;
    v)
        # update library version number
        version=$(grep -oE '[0-9][0-9.]+' README.md)
        sed -i "s/$version/$OPTARG/" README.md
        ;;
    p)
        clean_library
        copy_files "$OPTARG"
        ;;
    *)
        help_message
        ;;
    esac

done
